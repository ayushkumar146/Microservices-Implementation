//7)

package com.allinone.Product_Service.service;

// Lombok to generate constructor for final fields
import com.allinone.Product_Service.dto.ProductRequest;
import com.allinone.Product_Service.dto.ProductResponse;
import com.allinone.Product_Service.model.Product;
import com.allinone.Product_Service.repository.ProductRepository;
import lombok.RequiredArgsConstructor;

// Lombok to enable logging using log.info(), etc.
import lombok.extern.slf4j.Slf4j;

// Marks this class as a Spring service
import org.springframework.stereotype.Service;

import java.util.List;

// Annotate as a Spring Service
@Service

// Lombok: auto-generates constructor for all final fields (i.e., productRepository)
@RequiredArgsConstructor

// Enables SLF4J logger as `log`
@Slf4j
public class ProductService {

    // Injected repository for MongoDB interaction
    private final ProductRepository productRepository;

    // Method to create and save a product from ProductRequest DTO
    public void createProduct(ProductRequest productRequest) {
        // Build a Product object from the incoming request
        Product product = Product.builder()
                .name(productRequest.getName())            // set name
                .description(productRequest.getDescription()) // set description
                .price(productRequest.getPrice())          // set price
                .build();

        // Save to MongoDB
        productRepository.save(product);

        // Log product creation (product.getId() may be null if ID is generated by DB)
        log.info("Product {} is saved", product.getId());
    }

    // Fetch all products and map to response DTOs
    public List<ProductResponse> getAllProducts() {
        // Retrieve all Product entities
        List<Product> products = productRepository.findAll();

        // Map each Product to a ProductResponse DTO
        return products.stream()
                .map(this::mapToProductResponse) // convert to response :- means products have external field from the database that is not required, so we are mapping with dto's so that only the mentioned field in that dto is responded.
                .toList();                       // Java 16+ toList()
    }

    // Helper method to convert Product â†’ ProductResponse
    private ProductResponse mapToProductResponse(Product product) {
        return ProductResponse.builder()
                .id(product.getId())                // set ID
                .name(product.getName())            // set name
                .description(product.getDescription()) // set description
                .price(product.getPrice())          // set price
                .build();
    }
}

